// <auto-generated />
using GraphQL.AspNet.JMeterAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GraphQL.AspNet.JMeterAPI.Migrations
{
    [DbContext(typeof(BakeryContext))]
    partial class BakeryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.Bakery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Bakeries");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BakeryId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.InvoiceLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("NumberSold")
                        .HasColumnType("int");

                    b.Property<int>("PastryId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePriceEach")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PastryId");

                    b.ToTable("InvoiceLineItem");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("State")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.PastryRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("RecipeText")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("PastryRecipe");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.PastryStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BakeryId")
                        .HasColumnType("int");

                    b.Property<int>("NumberForSale")
                        .HasColumnType("int");

                    b.Property<int>("PastryRecipeId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePriceEach")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("PastryRecipeId");

                    b.ToTable("PastryStock");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.Bakery", b =>
                {
                    b.HasOne("GraphQL.AspNet.JMeterAPI.Model.Organization", "Organization")
                        .WithMany("Bakeries")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.Invoice", b =>
                {
                    b.HasOne("GraphQL.AspNet.JMeterAPI.Model.Bakery", "Bakery")
                        .WithMany("Invoices")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQL.AspNet.JMeterAPI.Model.Organization", "Organization")
                        .WithMany("Invoices")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.InvoiceLineItem", b =>
                {
                    b.HasOne("GraphQL.AspNet.JMeterAPI.Model.Invoice", "Invoice")
                        .WithMany("LineItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQL.AspNet.JMeterAPI.Model.PastryRecipe", "Pastry")
                        .WithMany()
                        .HasForeignKey("PastryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Pastry");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.PastryRecipe", b =>
                {
                    b.HasOne("GraphQL.AspNet.JMeterAPI.Model.Organization", "Organization")
                        .WithMany("Recipes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.PastryStock", b =>
                {
                    b.HasOne("GraphQL.AspNet.JMeterAPI.Model.Bakery", "Bakery")
                        .WithMany("Stock")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQL.AspNet.JMeterAPI.Model.PastryRecipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("PastryRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.Bakery", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.Invoice", b =>
                {
                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("GraphQL.AspNet.JMeterAPI.Model.Organization", b =>
                {
                    b.Navigation("Bakeries");

                    b.Navigation("Invoices");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
